   对于多租户的应用，不同租户的需求几乎都是有差异的，每个租户要求定制化他们的应用也是很自然的。如果这多租户应用是静态编译的二进制文件，那么满足这些多租户的要求及其他个性化的挑战是几乎不可能的。但是，一个多租户的应用，必须在其功能、界面等方面，满足不同租户的合理要求。 

    基于这些原因，云鹤PaaS应用平台（EEPlat）可以根据不同租户定义的元数据生成相对应的应用程序，而不是采用经过编译的二进制的可执行文件。元数据驱动开发是EEPlat的核心和基础。所谓元数据（metadata）即描述数据的数据(data about data)，在EEPlat中，对于描述业务系统(包括业务数据、逻辑和UI)的元数据我们称之为模型（model）或声明式业务对象（下文中元数据、模型、声明式业务对象的概念可以互相替换），而在模型的基础上，EEPlat又进行了进一步的抽象，称之为元模型（metamodel）,如下图：

  <img src="http://eeplat.googlecode.com/files/eeplat_meta_data.png"/>

    EEPlat是面向企业信息化、电子政务等信息化领域，以模型驱动为核心思想，通过建立并执行声明式业务对象，在EEPlat执行引擎的支撑下直接产生应用程序的开发及运行平台。在现阶段，EEPlat执行引擎只提供Java版本，但是在技术上我们还可以提供Microsoft .NET、Python、Ruby等其它多种开发平台上的执行引擎，可以达到一套模型驱动同不同技术平台多套系统的效果，可以实现真正的“跨平台”，可以满足客户应用中技术平台的多样性需求，为客户升级或转换最新技术平台做好了准备,如下图：
  <img src="http://eeplat.googlecode.com/files/eeplat_crosstech_struture.png"/>

 并且，EEPlat执行引擎、基础功能元数据、每个租户的元数据，每个租户的业务数据之间有一个明确的分离。这些明显的边界使我们可以安全得定制或修改租户的应用程序而不会影响其它租户。如下图：

  <img src="http://eeplat.googlecode.com/files/eeplat_pass_struture.png"/>

   EEPlat拥有世界领先的元模型体系。元模型是声明式业务对象的模型，声明式业务对象由元模型描述。EEPlat元模型体系是对企业信息化、电子政务等信息化领域业务的高度抽象，拥有自描述和动态扩展特性，能准确得完成业务领域模型的描述。元模型从承担职责的角度分为功能元模型、业务对象元模型、服务元模型、规则元模型、工作流元模型、组织元模型、UI元模型等。业务对象元模型、属性元模型、服务元模型、参数元模型、规则元模型形成了支撑平台的业务对象的可执行模型。业务对象元模型主要描述业务功能的静态结构，服务元模型主要完成业务逻辑，同时负责业务对象元模型之间的交互；工作流元模型主要完成业务流程及业务对象元模型的协作；组织元模型通过组织元模型之间的职责关系可以实现灵活的组织结构，UI元模型实现了菜单、面板、表格、表格元素、功能树等的UI元素的元模型，可以实现复杂的界面表现，如下图：



   和Salesforce 的比较的那个表。

   待续。。。

   