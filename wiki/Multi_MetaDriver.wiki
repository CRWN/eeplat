  元数据驱动开发是EEPlat的核心和基础。所谓元数据（metadata）即描述数据的数据(data about data)，在EEPlat中，对于描述业务系统的元数据我们称之为模型（model），而在模型的基础上，EEPlat又进行了进一步的抽象，称之为元模型（metamodel）。EEPlat拥有世界领先的元模型体系。
   但如何才能让一个多租户应用允许每个租户建立扩展标准的自定义数据对象，并定制全新的数据对象？如何保证租户的具体数据在共享数据库中的安全性，使得一个租户无法看到另一租户的数据？怎样才能使租户实时自定义应用程序的接口和业务逻辑，而不影响其他所有租户应用的功能和可用性？如何才能应用程序代码基的修补或升级不破坏特定的租户的定制应用？以及随着数以万计的租户订阅服务，应用的响应时间怎样实现可扩展？

建立一个应用程序的静态编译的可执行文件，并能够满足这些多租户及其他独特的挑战是很困难的。本质上说，一个多租户的应用，必须在其性质，或多态性方面，达到不同租户和他们的用户的个人期望。

基于这些原因，多租户应用设计已经发展到使用运行时引擎从元数据（即关于应用程序本身的数据）生成应用程序组件的阶段。在一个定义良好的元数据驱动的体系结构中（图2），已编译的运行时引擎（内核）、应用数据、描述一个应用程序的基础功能的元数据，以及与每个租户的数据和定制相关的元数据之间有一个明确的分离。这些明显的边界使人们有可能独立更新系统内核，修改的核心应用程序，或定制租户的具体组成部分，虚拟意义上来说，几乎不会影响其他人。


