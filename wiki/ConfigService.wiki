== 基本概念 ==

    服务是描述业务对象的行为。这个服务既可以是底层数据层面的操作，也可以是粗粒度的业务行为。当一个数据表被初始化为业务对象后，会形成6个基本服务，命名规则是业务对象 + `_` + 后缀，后缀分别为browse、list、insert、update、delete、auto_condition。

    服务按照复杂程度可以分为两类:
       # 基本服务，只定义的一个sql语句。
       # 一般服务，定义了自定义动作或者定义了规则。
       _  一般服务如果定义有sql语句，那么可以“退化”作为基本服务使用。 在配置中跟控制器的选择有关系，控制器的后缀名如果含有uf，那么它既可以执行基本服务也可以执行一般服务，否则只能执行基本服务。_


    服务按照操作类型可以分为：
       # 简单查询 定义的SQL语句只包含针对一个表的查询。
       # 查询  定义的SQL语句完成的是select 操作 查询类的SQL语句，可以是分为两段，第一段是需要完成查询的SQL,第二段是第一段SQL语句取回结果的数量，如
{{{
   select * from demo;select count(*) from demo
}}}
   在一般情况下，都会写作{{{ select * from demo }}}因为在需要结果集数量的场合，系统可以把后面的语句补写完整。但是如果是非常复杂的SQL语句，系统可能无法进行补写，需要写完整的两段。
       # 修改  定义的SQL语句完成的是update 操作
       # 新增  定义的SQL语句完成的是insert 操作
       # 保存  是新增或者是修改
       # 删除  定义的SQL语句完成的是delete 操作
       # 自动条件查询 定义的SQL语句含有通配符/`*`condition`*`/，运行时可以根据用户的输入自动匹配查询条件；如果需要排序通配符为--orderby-- defaultcols desc@#，一个例子：
{{{
        select * from demo /*condition*/ --orderby-- defaultcols desc@#
}}}
       # 自动条件修改 修改的一种特殊形式，update语句必须按照类似系统生成的严格格式编写，执行时系统会自动重新组装sql语句，用户录入的才修改，没有录入的不是置为null，而是不作修改。
       # 自由查询    和自动条件查询的功能类似。可以适用更复杂的情况，一个例子：
{{{
	select *  from v_tbclass where objuid  
	in (select objuid from v_tbclass minus 	(select fdclassid from V_STU_ALRDY_KAOQING WHERE 1=1  	FDCLASSNUM[AND  V_STU_ALRDY_KAOQING.FDCLASSNUM='?'])) 
			and 1=1 and fdhaspersons>0 and fdifpassed=0 FDCLASSNUM[and fdtotaltimes>='?'],
			fdnianfen[AND  fdnianfen='?'],fdxueqiname[AND  fdxueqi='?'],fdgrade[AND  fdgrade='?'],
			fdsubject[AND  fdsubject='?'],fdclasslevel[AND  fdclasslevel='?'],fdarea[AND  fdarea='?'],
			fdxuequ[AND  fdxuequ='?'],fdclassareaname[AND  fdclassareaname='?'],
			fdclassroomid[AND  fdclassroomid='?'],fdteacherid[AND  fdteacherid='?'],
			fdclasstemplateid[AND  fdclasstemplateid='?'],fdstarttime[AND  fdstarttime='?']

}}}
       # 自由保存
       # 脚本  定义一个javascript 脚本，最后一行返回sql。
       # 自定义动作查询  定义一个自定义动作，自定义动作返回一个结果集。 自定义动作查询属于基本服务。 _ 注意在这个自定义动作里面不能直接使用该服务的invokeSelect()方法，否则要引起死循环。 _

===服务的执行===
   
  
  # 简单执行　即只执行所定义的SQL语句，JAVA代码
        {{{
               DOService aService = DOService.getService("服务名称");
               aService.invokeUpdate();//或者aService.inovkeSelect
           }}}
  # 完全执行  指定所定义的规则、自定动作等。 如果定义了自定义动作，则不执行所定义的SQL语句。JAVA代码
        {{{
               DOService aService = DOService.getService("服务名称");
               aService.invokeAll();
           }}}

    调用服务的表格元素控制器，如果是完全执行， 一般以uf为后缀。


    服务可以通过修改“业务对象”改变其隶属的业务对象，放到其它业务对象下面。


=== restful webservice 调用及可见性 ===
     
     可见性,包括公开(public),保护(protected),私有(private)。

     平台的服务可以通过restful web service 的方式供外部访问。
     restful web service 是一种轻量级的web service 的实现方式，简单而且高效。
     
     1,"调用方"访问平台的服务，必须经过授权，需要平台提供的用户名和密码，"调用方"需要小心保护用户名密码，最好经常更换密码。
     
     2，如果一个服务需要被外部访问那么必须设置服务的可见性，可见性为public 或 
     public类型的服务:只要"调用方"取得平台提供的用户名密码即可访问。
     protected类型的服务："调用方"除了取得平台提供的用户名密码即可访问，还要单独授权。
     
     3，对"调用方"的验证方式是可以自定义的：
     在globals.xml中：
    {{{
         <property name="webservice.login.service">do_org_user_findbynameandpwd</property>
     }}}
     这个是验证"调用方"的用户名和密码，可以和普通用户登录的服务一样，这样"调用方"的用户名密码也存放在用户表中，从安全性角度讲，最好分开。
     {{{ 
         <property name="webservice.auth.service">exists_rest</property>
     }}}
     这个验证proteced的服务是否获得单独授权。

===总线刷新类型===
    
    总线刷新类型包括REFRESH_NO（不刷新）、REFESH_CURRENT（刷新业务对象当前值）、REFESH_SEARCH_LIST（刷新总线SEARCH_LIST节点）、REFESH_ALL（全部刷新包括SEARCH_LIST，GLOBAL_UID节点及业务对象总线当前值）、REFESH_MAP_DATA_GLOBAL_UID（刷新业务对象当前值及总线GLOBAL_UID节点）。

    总线相关资料，参见 [BusinessObjectBus 业务对象总线]。    

    总线刷新后会影响到参数的获取，参见[ConfigParameter 参数]。

    如果服务没有设定总线刷新类型，新增和修改类型的服务的缺省类型是REFESH_CURRENT，其它类型服务缺省是REFRESH_NO。
   

===参数检查===
   
  参数检查的详细说明参见[ConfigParameterCheck 参数检查]。
  
  这里的参数检查选项是指定服务是否进行“参数检查”。
  # PARA_CHECK_FALSE　　不进行参数检查默认选项
  # PARA_CHECK_SIMPLE   只要参数不合法就返回
  # PARA_CHECK_DETAIL   检查完所有的参数，把不合法的信息进行组合后返回

===事务===

  支持声明式事务。

  只有服务定义规则的时候定义事务才有意义，默认情况下没有定义事务。

  当服务定义事务即“事务控制”选择“是”时，服务及服务所包含的规则在一个事务下执行；服务包含的规则中定义的服务即使“事务控制”选择“否”也不起作用。



===日志===

  日志定义默认为否。当服务的日志设为“是”时， 服务的类型只有是新增、修改、删除才记录日志，默认日志记录被写入到do_log_data表中。可以设置“日志别称”，如果不设置日志名称将取自服务的类型（“删除”、“修改”、“新增”）。

  如果需要自定义记录日志的行为，请把自定义类全名定义到“过滤类”里面，改自定义类需要实现com.exedosoft.plat.action.DOAction接口。


===记录过滤===

  记录过滤指查询类型的服务返回的结果经过重新过滤，返回查询结果的子集。

  不推荐使用记录过滤的方式处理条数非常大的结果集。

  记录过滤必须制定“过滤类”，过滤类需要实现com.exedosoft.plat.DOAccess接口。

  不能同时自定义记录日志的行为（见上）和实现过滤类。

  记录过滤支持和工作流节点权限的混合过滤。

   

== 对应JAVA 数据类型 ==
    com.exedosoft.plat.bo.DOService

== 配置界面 ==

 http://eeplat.googlecode.com/files/do_service.png

 通过配置，我们可以:

  <b> 修改服务 </b>

  <b> 复制服务 </b>

  <b> 生成规则  </b>

  <b> 新增  </b>

  <b> 删除 </b>

  <b> 导出 </b>

  